generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum ApplicationStatus {
  ADVISOR_DECLERATION_PENDING
  SIGNATURE_PROCESS_PENDING
  SIGNATURE_IN_PROCESS
  SUBMITTED
}

enum PlanType {
  MEDICAL_CARE_INSURANCE
  LEGACY_INSURANCE
  MEDICARE_AND_LEGACY_INSURANCE
  SINGLE_PRODUCT
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
}

enum PetSpecies {
  DOG
  CAT
  OTHER
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String?
  firstName String?
  lastName  String?
  phoneNum  String?
  role UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pets         Pet[]
  applications Application[]
  accounts     Account[]
  sessions     Session[]

  clientDetails ClientDetails?
}

model ClientDetails {
  id                 String   @id @default(uuid())
  userId             String   @unique
  streetAddress      String
  country            String
  city               String
  province           String
  postalCode         String
  declarationAccuracy Boolean
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pet {
  id                String     @id @default(uuid())
  ownerId           String
  name              String
  species           PetSpecies
  breed             String?
  dateOfBirth       DateTime?
  gender            String?
  weight            Float?
  medicalConditions String[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Application {
  id             String             @id @default(uuid())
  customerId     String
  petId          String
  policyNumber   String             @unique
  planType       PlanType
  premiumAmount  Float
  deductible     Float
  coverageLimit  Float?
  status         ApplicationStatus @default(ADVISOR_DECLERATION_PENDING)
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  customer User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  pet      Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  claims   Claim[]
  payments Payment[]
}

model Claim {
  id                  String      @id @default(uuid())
  applicationId       String
  claimNumber         String      @unique
  incidentDate        DateTime
  claimAmount         Float
  approvedAmount      Float?
  status              ClaimStatus @default(PENDING)
  description         String?
  veterinarianName    String?
  veterinarianContact String?
  documents           String[]
  adminNotes          String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Payment {
  id             String   @id @default(uuid())
  applicationId  String
  amount         Float
  paymentDate    DateTime
  paymentMethod  String?
  transactionId  String?
  status         String   @default("COMPLETED")
  createdAt      DateTime @default(now())

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @map("refresh_token")
  access_token       String? @map("access_token")
  expires_at         Int?    @map("expires_at")
  token_type         String? @map("token_type")
  scope              String?
  id_token           String? @map("id_token")
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
